{"version":3,"sources":["pages/login/component/title/Title.js","pages/login/component/label/Label.js","pages/login/component/input/Input.js","pages/home/home.js","pages/login/Login.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","className","Label","Input","attribute","handleChange","params","id","name","placeholder","type","onChange","e","target","value","Home","Login","useState","user","setUser","password","setPassword","passswordError","setpassswordError","isLogin","setIfLogin","hasError","setHasError","length","onClick","account","param","ac","JSON","stringify","localStorage","setItem","ifMatch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAeeA,G,MAZD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACb,OACI,kBAAC,WAAD,KACI,2BAAOC,UAAU,gBAAiBD,GAClC,uBAAGC,UAAU,sBAAb,oEAAgG,6BAAhG,eACY,6BADZ,mBCEGC,EAND,SAAC,GAAc,IAAZF,EAAW,EAAXA,KACb,OACA,yBAAKC,UAAU,gBAAiBD,ICarBG,G,MAfD,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,OACrC,OACI,kBAAC,WAAD,KACI,2BACIC,GAAMH,EAAUG,GAChBC,KAAQJ,EAAUI,KAClBC,YAAeL,EAAUK,YACzBC,KAAQN,EAAUM,KAClBC,SAAa,SAACC,GAAD,OAAOP,EAAaO,EAAEC,OAAOL,KAAMI,EAAEC,OAAOC,QACzDb,UAAaK,EAAS,4BAA8B,oBCVrD,SAASS,IACpB,OACI,yBAAKd,UAAU,QACX,wBAAIA,UAAU,gBAAd,cACA,gI,UCgGGe,EA/FD,WAAO,IAAD,EACMC,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,OAEcF,mBAAS,IAFvB,mBAEXG,EAFW,KAEDC,EAFC,OAG0BJ,oBAAS,GAHnC,mBAGXK,EAHW,KAGKC,EAHL,OAIYN,oBAAS,GAJrB,mBAIXO,EAJW,KAIFC,EAJE,OAKcR,oBAAS,GALvB,mBAKXS,EALW,KAKDC,EALC,KAOlB,SAAStB,EAAaG,EAAMM,GACb,WAATN,GACFW,EAAQL,GACRa,GAAY,IAERb,EAAMc,OAAS,GACjBL,GAAkB,GAClBI,GAAY,KAEZJ,GAAkB,GAClBF,EAAYP,GACZa,GAAY,IA+BlB,OACE,yBAAK1B,UAAU,SACZuB,EAAU,kBAACT,EAAD,MACX,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAOd,UAAU,eAAeD,KAAK,aACpC0B,GACC,2BAAOzB,UAAU,gBAAjB,uCAIF,kBAAC,EAAD,CAAOD,KAAK,YACZ,kBAAC,EAAD,CACEI,UAAW,CACTG,GAAI,SACJC,KAAM,SACNC,YAAa,qBACbC,KAAM,QAERL,aAAcA,IAEhB,kBAAC,EAAD,CAAOL,KAAK,kBACZ,kBAAC,EAAD,CACEI,UAAW,CACTG,GAAI,WACJC,KAAM,WACNC,YAAa,4BACbC,KAAM,YAERL,aAAcA,EACdC,OAAQgB,IAGTA,GACC,2BAAOrB,UAAU,mCAAjB,wBAIF,4BAAQA,UAAU,MAAM4B,QA5C9B,WACE,IAAIC,EAAU,CAAEZ,OAAME,YAClBU,GArBN,SAAiBC,GACf,GAAIA,EAAMb,KAAKU,OAAS,GAAKG,EAAMX,SAASQ,OAAS,EACnD,GAAmB,UAAfG,EAAMb,MAAuC,WAAnBa,EAAMX,SAAuB,CAAC,IAGtDY,EAAK,CAAEd,KAFgBa,EAAnBb,KAESE,SAFUW,EAAbX,UAGVU,EAAUG,KAAKC,UAAUF,GAC7BG,aAAaC,QAAQ,UAAWN,GAChCL,GAAW,QAEXA,GAAW,GACXE,GAAY,QAGdF,GAAW,GACXE,GAAY,GAOZU,CAAQP,KAyCN,eCjFOQ,EANH,WACV,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9844826a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './Title.css';\n\nconst Title = ({ text }) => {\n    return(\n        <Fragment>\n            <label className=\"title--label\">{ text }</label>\n            <p className=\"title__description\">*Necesita un usuario y una contraseña para ingresar al sitio. <br />\n            User: admin <br />\n            Pass: 123456\n            </p>\n        </Fragment>\n    )\n}\n\nexport default Title;","import React from 'react';\n\n\nconst Label = ({ text }) => {\n    return(\n    <div className=\"login__label\">{ text }</div>\n    )\n}\n\nexport default Label;","import React, { Fragment } from 'react'\nimport './Input.css'\n\nconst Input = ({attribute, handleChange, params}) => {\n    return(\n        <Fragment>\n            <input \n                id = {attribute.id}\n                name = {attribute.name}\n                placeholder = {attribute.placeholder}\n                type = {attribute.type}\n                onChange = { (e) => handleChange(e.target.name, e.target.value)}\n                className = {params ? 'login__input input--error' : 'login__input'}\n            />\n        </Fragment>\n    )\n}\n\nexport default Input;","import React from 'react'\n\nexport default function Home() {\n    return(\n        <div className=\"home\">\n            <h1 className=\"title--label\">Bienvenido</h1>\n            <p>Gracias por ingresar a nuestro sitio, este es un simple formulario de validacion, hecho en React</p>\n        </div>\n    )\n}","import React, { Fragment, useState } from \"react\";\nimport Title from \"./component/title/Title\";\nimport Label from \"./component/label/Label\";\nimport Input from \"./component/input/Input\";\nimport Home from \"../home/home\"\nimport \"./login.css\";\n\nconst Login = () => {\n  const [user, setUser] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passswordError, setpassswordError] = useState(false);\n  const [isLogin, setIfLogin] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  function handleChange(name, value) {\n    if (name === \"userio\") {\n      setUser(value);\n      setHasError(false);\n    } else {\n      if (value.length < 6) {\n        setpassswordError(true);\n        setHasError(false);\n      } else {\n        setpassswordError(false);\n        setPassword(value);\n        setHasError(false);\n      }\n    }\n  }\n\n  function ifMatch(param) {\n    if (param.user.length > 0 && param.password.length > 0) {\n      if (param.user === \"admin\" && param.password === \"123456\") {\n        const { user, password } = param;\n\n        let ac = { user, password };\n        let account = JSON.stringify(ac);\n        localStorage.setItem(\"account\", account);\n        setIfLogin(true);\n      } else {\n        setIfLogin(false);\n        setHasError(true);\n      }\n    } else {\n      setIfLogin(false);\n      setHasError(true);\n    }\n  }\n\n  function handleSubmit() {\n    let account = { user, password };\n    if (account) {\n      ifMatch(account);\n    }\n  }\n\n  return (\n    <div className=\"login\">\n      {isLogin ? <Home /> :\n      <Fragment>\n        <Title className=\"login__title\" text=\"Ingresar\" />\n        {hasError && (\n          <label className=\"label--error\">\n            Usuario o contraseña incorrectos\n          </label>\n        )}\n        <Label text=\"Usuario\" />\n        <Input\n          attribute={{\n            id: \"userio\",\n            name: \"userio\",\n            placeholder: \"Ingrese un usuario\",\n            type: \"text\",\n          }}\n          handleChange={handleChange}\n        />\n        <Label text=\"Contraseña\" />\n        <Input\n          attribute={{\n            id: \"password\",\n            name: \"password\",\n            placeholder: \"Ingrese una contraseña\",\n            type: \"password\",\n          }}\n          handleChange={handleChange}\n          params={passswordError}\n        />\n\n        {passswordError && (\n          <label className=\"label--error title__description\">\n            Ingrese 6 dígitos\n          </label>\n        )}\n        <button className=\"btn\" onClick={handleSubmit}>\n          Ingresar\n        </button>\n      </Fragment>\n}\n    </div>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\nimport Login from './pages/login/Login';\n\nimport './App.css'\n\nconst App = () => {\n  return(\n    <Login />\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}